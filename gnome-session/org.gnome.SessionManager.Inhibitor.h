/*
 * Generated by gdbus-codegen 2.54.0. DO NOT EDIT.
 *
 * The license of this code is the same as for the source it was derived from.
 */

#ifndef __ORG_GNOME_SESSIONMANAGER_INHIBITOR_H__
#define __ORG_GNOME_SESSIONMANAGER_INHIBITOR_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.gnome.SessionManager.Inhibitor */

#define GSM_TYPE_EXPORTED_INHIBITOR (gsm_exported_inhibitor_get_type ())
#define GSM_EXPORTED_INHIBITOR(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GSM_TYPE_EXPORTED_INHIBITOR, GsmExportedInhibitor))
#define GSM_IS_EXPORTED_INHIBITOR(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GSM_TYPE_EXPORTED_INHIBITOR))
#define GSM_EXPORTED_INHIBITOR_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), GSM_TYPE_EXPORTED_INHIBITOR, GsmExportedInhibitorIface))

struct _GsmExportedInhibitor;
typedef struct _GsmExportedInhibitor GsmExportedInhibitor;
typedef struct _GsmExportedInhibitorIface GsmExportedInhibitorIface;

struct _GsmExportedInhibitorIface
{
  GTypeInterface parent_iface;

  gboolean (*handle_get_app_id) (
    GsmExportedInhibitor *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_get_client_id) (
    GsmExportedInhibitor *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_get_flags) (
    GsmExportedInhibitor *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_get_reason) (
    GsmExportedInhibitor *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_get_toplevel_xid) (
    GsmExportedInhibitor *object,
    GDBusMethodInvocation *invocation);

};

GType gsm_exported_inhibitor_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *gsm_exported_inhibitor_interface_info (void);
guint gsm_exported_inhibitor_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void gsm_exported_inhibitor_complete_get_app_id (
    GsmExportedInhibitor *object,
    GDBusMethodInvocation *invocation,
    const gchar *app_id);

void gsm_exported_inhibitor_complete_get_client_id (
    GsmExportedInhibitor *object,
    GDBusMethodInvocation *invocation,
    const gchar *client_id);

void gsm_exported_inhibitor_complete_get_reason (
    GsmExportedInhibitor *object,
    GDBusMethodInvocation *invocation,
    const gchar *reason);

void gsm_exported_inhibitor_complete_get_flags (
    GsmExportedInhibitor *object,
    GDBusMethodInvocation *invocation,
    guint flags);

void gsm_exported_inhibitor_complete_get_toplevel_xid (
    GsmExportedInhibitor *object,
    GDBusMethodInvocation *invocation,
    guint xid);



/* D-Bus method calls: */
void gsm_exported_inhibitor_call_get_app_id (
    GsmExportedInhibitor *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gsm_exported_inhibitor_call_get_app_id_finish (
    GsmExportedInhibitor *proxy,
    gchar **out_app_id,
    GAsyncResult *res,
    GError **error);

gboolean gsm_exported_inhibitor_call_get_app_id_sync (
    GsmExportedInhibitor *proxy,
    gchar **out_app_id,
    GCancellable *cancellable,
    GError **error);

void gsm_exported_inhibitor_call_get_client_id (
    GsmExportedInhibitor *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gsm_exported_inhibitor_call_get_client_id_finish (
    GsmExportedInhibitor *proxy,
    gchar **out_client_id,
    GAsyncResult *res,
    GError **error);

gboolean gsm_exported_inhibitor_call_get_client_id_sync (
    GsmExportedInhibitor *proxy,
    gchar **out_client_id,
    GCancellable *cancellable,
    GError **error);

void gsm_exported_inhibitor_call_get_reason (
    GsmExportedInhibitor *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gsm_exported_inhibitor_call_get_reason_finish (
    GsmExportedInhibitor *proxy,
    gchar **out_reason,
    GAsyncResult *res,
    GError **error);

gboolean gsm_exported_inhibitor_call_get_reason_sync (
    GsmExportedInhibitor *proxy,
    gchar **out_reason,
    GCancellable *cancellable,
    GError **error);

void gsm_exported_inhibitor_call_get_flags (
    GsmExportedInhibitor *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gsm_exported_inhibitor_call_get_flags_finish (
    GsmExportedInhibitor *proxy,
    guint *out_flags,
    GAsyncResult *res,
    GError **error);

gboolean gsm_exported_inhibitor_call_get_flags_sync (
    GsmExportedInhibitor *proxy,
    guint *out_flags,
    GCancellable *cancellable,
    GError **error);

void gsm_exported_inhibitor_call_get_toplevel_xid (
    GsmExportedInhibitor *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gsm_exported_inhibitor_call_get_toplevel_xid_finish (
    GsmExportedInhibitor *proxy,
    guint *out_xid,
    GAsyncResult *res,
    GError **error);

gboolean gsm_exported_inhibitor_call_get_toplevel_xid_sync (
    GsmExportedInhibitor *proxy,
    guint *out_xid,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define GSM_TYPE_EXPORTED_INHIBITOR_PROXY (gsm_exported_inhibitor_proxy_get_type ())
#define GSM_EXPORTED_INHIBITOR_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GSM_TYPE_EXPORTED_INHIBITOR_PROXY, GsmExportedInhibitorProxy))
#define GSM_EXPORTED_INHIBITOR_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GSM_TYPE_EXPORTED_INHIBITOR_PROXY, GsmExportedInhibitorProxyClass))
#define GSM_EXPORTED_INHIBITOR_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GSM_TYPE_EXPORTED_INHIBITOR_PROXY, GsmExportedInhibitorProxyClass))
#define GSM_IS_EXPORTED_INHIBITOR_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GSM_TYPE_EXPORTED_INHIBITOR_PROXY))
#define GSM_IS_EXPORTED_INHIBITOR_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GSM_TYPE_EXPORTED_INHIBITOR_PROXY))

typedef struct _GsmExportedInhibitorProxy GsmExportedInhibitorProxy;
typedef struct _GsmExportedInhibitorProxyClass GsmExportedInhibitorProxyClass;
typedef struct _GsmExportedInhibitorProxyPrivate GsmExportedInhibitorProxyPrivate;

struct _GsmExportedInhibitorProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  GsmExportedInhibitorProxyPrivate *priv;
};

struct _GsmExportedInhibitorProxyClass
{
  GDBusProxyClass parent_class;
};

GType gsm_exported_inhibitor_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GsmExportedInhibitorProxy, g_object_unref)
#endif

void gsm_exported_inhibitor_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GsmExportedInhibitor *gsm_exported_inhibitor_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
GsmExportedInhibitor *gsm_exported_inhibitor_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void gsm_exported_inhibitor_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GsmExportedInhibitor *gsm_exported_inhibitor_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
GsmExportedInhibitor *gsm_exported_inhibitor_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define GSM_TYPE_EXPORTED_INHIBITOR_SKELETON (gsm_exported_inhibitor_skeleton_get_type ())
#define GSM_EXPORTED_INHIBITOR_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GSM_TYPE_EXPORTED_INHIBITOR_SKELETON, GsmExportedInhibitorSkeleton))
#define GSM_EXPORTED_INHIBITOR_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GSM_TYPE_EXPORTED_INHIBITOR_SKELETON, GsmExportedInhibitorSkeletonClass))
#define GSM_EXPORTED_INHIBITOR_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GSM_TYPE_EXPORTED_INHIBITOR_SKELETON, GsmExportedInhibitorSkeletonClass))
#define GSM_IS_EXPORTED_INHIBITOR_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GSM_TYPE_EXPORTED_INHIBITOR_SKELETON))
#define GSM_IS_EXPORTED_INHIBITOR_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GSM_TYPE_EXPORTED_INHIBITOR_SKELETON))

typedef struct _GsmExportedInhibitorSkeleton GsmExportedInhibitorSkeleton;
typedef struct _GsmExportedInhibitorSkeletonClass GsmExportedInhibitorSkeletonClass;
typedef struct _GsmExportedInhibitorSkeletonPrivate GsmExportedInhibitorSkeletonPrivate;

struct _GsmExportedInhibitorSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  GsmExportedInhibitorSkeletonPrivate *priv;
};

struct _GsmExportedInhibitorSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType gsm_exported_inhibitor_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GsmExportedInhibitorSkeleton, g_object_unref)
#endif

GsmExportedInhibitor *gsm_exported_inhibitor_skeleton_new (void);


G_END_DECLS

#endif /* __ORG_GNOME_SESSIONMANAGER_INHIBITOR_H__ */
