/*
 * Generated by gdbus-codegen 2.54.0. DO NOT EDIT.
 *
 * The license of this code is the same as for the source it was derived from.
 */

#ifndef __ORG_GNOME_SESSIONMANAGER_H__
#define __ORG_GNOME_SESSIONMANAGER_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.gnome.SessionManager */

#define GSM_TYPE_EXPORTED_MANAGER (gsm_exported_manager_get_type ())
#define GSM_EXPORTED_MANAGER(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GSM_TYPE_EXPORTED_MANAGER, GsmExportedManager))
#define GSM_IS_EXPORTED_MANAGER(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GSM_TYPE_EXPORTED_MANAGER))
#define GSM_EXPORTED_MANAGER_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), GSM_TYPE_EXPORTED_MANAGER, GsmExportedManagerIface))

struct _GsmExportedManager;
typedef struct _GsmExportedManager GsmExportedManager;
typedef struct _GsmExportedManagerIface GsmExportedManagerIface;

struct _GsmExportedManagerIface
{
  GTypeInterface parent_iface;



  gboolean (*handle_can_shutdown) (
    GsmExportedManager *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_get_clients) (
    GsmExportedManager *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_get_inhibitors) (
    GsmExportedManager *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_get_locale) (
    GsmExportedManager *object,
    GDBusMethodInvocation *invocation,
    gint arg_category);

  gboolean (*handle_inhibit) (
    GsmExportedManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_app_id,
    guint arg_toplevel_xid,
    const gchar *arg_reason,
    guint arg_flags);

  gboolean (*handle_initialization_error) (
    GsmExportedManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_message,
    gboolean arg_fatal);

  gboolean (*handle_is_autostart_condition_handled) (
    GsmExportedManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_condition);

  gboolean (*handle_is_inhibited) (
    GsmExportedManager *object,
    GDBusMethodInvocation *invocation,
    guint arg_flags);

  gboolean (*handle_is_session_running) (
    GsmExportedManager *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_logout) (
    GsmExportedManager *object,
    GDBusMethodInvocation *invocation,
    guint arg_mode);

  gboolean (*handle_reboot) (
    GsmExportedManager *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_register_client) (
    GsmExportedManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_app_id,
    const gchar *arg_client_startup_id);

  gboolean (*handle_setenv) (
    GsmExportedManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_variable,
    const gchar *arg_value);

  gboolean (*handle_shutdown) (
    GsmExportedManager *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_uninhibit) (
    GsmExportedManager *object,
    GDBusMethodInvocation *invocation,
    guint arg_inhibit_cookie);

  gboolean (*handle_unregister_client) (
    GsmExportedManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_client_id);

  guint  (*get_inhibited_actions) (GsmExportedManager *object);

  const gchar * (*get_renderer) (GsmExportedManager *object);

  gboolean  (*get_session_is_active) (GsmExportedManager *object);

  const gchar * (*get_session_name) (GsmExportedManager *object);

  void (*client_added) (
    GsmExportedManager *object,
    const gchar *arg_id);

  void (*client_removed) (
    GsmExportedManager *object,
    const gchar *arg_id);

  void (*inhibitor_added) (
    GsmExportedManager *object,
    const gchar *arg_id);

  void (*inhibitor_removed) (
    GsmExportedManager *object,
    const gchar *arg_id);

  void (*session_over) (
    GsmExportedManager *object);

  void (*session_running) (
    GsmExportedManager *object);

};

GType gsm_exported_manager_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *gsm_exported_manager_interface_info (void);
guint gsm_exported_manager_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void gsm_exported_manager_complete_setenv (
    GsmExportedManager *object,
    GDBusMethodInvocation *invocation);

void gsm_exported_manager_complete_get_locale (
    GsmExportedManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *value);

void gsm_exported_manager_complete_initialization_error (
    GsmExportedManager *object,
    GDBusMethodInvocation *invocation);

void gsm_exported_manager_complete_register_client (
    GsmExportedManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *client_id);

void gsm_exported_manager_complete_unregister_client (
    GsmExportedManager *object,
    GDBusMethodInvocation *invocation);

void gsm_exported_manager_complete_inhibit (
    GsmExportedManager *object,
    GDBusMethodInvocation *invocation,
    guint inhibit_cookie);

void gsm_exported_manager_complete_uninhibit (
    GsmExportedManager *object,
    GDBusMethodInvocation *invocation);

void gsm_exported_manager_complete_is_inhibited (
    GsmExportedManager *object,
    GDBusMethodInvocation *invocation,
    gboolean is_inhibited);

void gsm_exported_manager_complete_get_clients (
    GsmExportedManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *clients);

void gsm_exported_manager_complete_get_inhibitors (
    GsmExportedManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *inhibitors);

void gsm_exported_manager_complete_is_autostart_condition_handled (
    GsmExportedManager *object,
    GDBusMethodInvocation *invocation,
    gboolean handled);

void gsm_exported_manager_complete_shutdown (
    GsmExportedManager *object,
    GDBusMethodInvocation *invocation);

void gsm_exported_manager_complete_reboot (
    GsmExportedManager *object,
    GDBusMethodInvocation *invocation);

void gsm_exported_manager_complete_can_shutdown (
    GsmExportedManager *object,
    GDBusMethodInvocation *invocation,
    gboolean is_available);

void gsm_exported_manager_complete_logout (
    GsmExportedManager *object,
    GDBusMethodInvocation *invocation);

void gsm_exported_manager_complete_is_session_running (
    GsmExportedManager *object,
    GDBusMethodInvocation *invocation,
    gboolean running);



/* D-Bus signal emissions functions: */
void gsm_exported_manager_emit_client_added (
    GsmExportedManager *object,
    const gchar *arg_id);

void gsm_exported_manager_emit_client_removed (
    GsmExportedManager *object,
    const gchar *arg_id);

void gsm_exported_manager_emit_inhibitor_added (
    GsmExportedManager *object,
    const gchar *arg_id);

void gsm_exported_manager_emit_inhibitor_removed (
    GsmExportedManager *object,
    const gchar *arg_id);

void gsm_exported_manager_emit_session_running (
    GsmExportedManager *object);

void gsm_exported_manager_emit_session_over (
    GsmExportedManager *object);



/* D-Bus method calls: */
void gsm_exported_manager_call_setenv (
    GsmExportedManager *proxy,
    const gchar *arg_variable,
    const gchar *arg_value,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gsm_exported_manager_call_setenv_finish (
    GsmExportedManager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean gsm_exported_manager_call_setenv_sync (
    GsmExportedManager *proxy,
    const gchar *arg_variable,
    const gchar *arg_value,
    GCancellable *cancellable,
    GError **error);

void gsm_exported_manager_call_get_locale (
    GsmExportedManager *proxy,
    gint arg_category,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gsm_exported_manager_call_get_locale_finish (
    GsmExportedManager *proxy,
    gchar **out_value,
    GAsyncResult *res,
    GError **error);

gboolean gsm_exported_manager_call_get_locale_sync (
    GsmExportedManager *proxy,
    gint arg_category,
    gchar **out_value,
    GCancellable *cancellable,
    GError **error);

void gsm_exported_manager_call_initialization_error (
    GsmExportedManager *proxy,
    const gchar *arg_message,
    gboolean arg_fatal,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gsm_exported_manager_call_initialization_error_finish (
    GsmExportedManager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean gsm_exported_manager_call_initialization_error_sync (
    GsmExportedManager *proxy,
    const gchar *arg_message,
    gboolean arg_fatal,
    GCancellable *cancellable,
    GError **error);

void gsm_exported_manager_call_register_client (
    GsmExportedManager *proxy,
    const gchar *arg_app_id,
    const gchar *arg_client_startup_id,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gsm_exported_manager_call_register_client_finish (
    GsmExportedManager *proxy,
    gchar **out_client_id,
    GAsyncResult *res,
    GError **error);

gboolean gsm_exported_manager_call_register_client_sync (
    GsmExportedManager *proxy,
    const gchar *arg_app_id,
    const gchar *arg_client_startup_id,
    gchar **out_client_id,
    GCancellable *cancellable,
    GError **error);

void gsm_exported_manager_call_unregister_client (
    GsmExportedManager *proxy,
    const gchar *arg_client_id,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gsm_exported_manager_call_unregister_client_finish (
    GsmExportedManager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean gsm_exported_manager_call_unregister_client_sync (
    GsmExportedManager *proxy,
    const gchar *arg_client_id,
    GCancellable *cancellable,
    GError **error);

void gsm_exported_manager_call_inhibit (
    GsmExportedManager *proxy,
    const gchar *arg_app_id,
    guint arg_toplevel_xid,
    const gchar *arg_reason,
    guint arg_flags,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gsm_exported_manager_call_inhibit_finish (
    GsmExportedManager *proxy,
    guint *out_inhibit_cookie,
    GAsyncResult *res,
    GError **error);

gboolean gsm_exported_manager_call_inhibit_sync (
    GsmExportedManager *proxy,
    const gchar *arg_app_id,
    guint arg_toplevel_xid,
    const gchar *arg_reason,
    guint arg_flags,
    guint *out_inhibit_cookie,
    GCancellable *cancellable,
    GError **error);

void gsm_exported_manager_call_uninhibit (
    GsmExportedManager *proxy,
    guint arg_inhibit_cookie,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gsm_exported_manager_call_uninhibit_finish (
    GsmExportedManager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean gsm_exported_manager_call_uninhibit_sync (
    GsmExportedManager *proxy,
    guint arg_inhibit_cookie,
    GCancellable *cancellable,
    GError **error);

void gsm_exported_manager_call_is_inhibited (
    GsmExportedManager *proxy,
    guint arg_flags,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gsm_exported_manager_call_is_inhibited_finish (
    GsmExportedManager *proxy,
    gboolean *out_is_inhibited,
    GAsyncResult *res,
    GError **error);

gboolean gsm_exported_manager_call_is_inhibited_sync (
    GsmExportedManager *proxy,
    guint arg_flags,
    gboolean *out_is_inhibited,
    GCancellable *cancellable,
    GError **error);

void gsm_exported_manager_call_get_clients (
    GsmExportedManager *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gsm_exported_manager_call_get_clients_finish (
    GsmExportedManager *proxy,
    gchar ***out_clients,
    GAsyncResult *res,
    GError **error);

gboolean gsm_exported_manager_call_get_clients_sync (
    GsmExportedManager *proxy,
    gchar ***out_clients,
    GCancellable *cancellable,
    GError **error);

void gsm_exported_manager_call_get_inhibitors (
    GsmExportedManager *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gsm_exported_manager_call_get_inhibitors_finish (
    GsmExportedManager *proxy,
    gchar ***out_inhibitors,
    GAsyncResult *res,
    GError **error);

gboolean gsm_exported_manager_call_get_inhibitors_sync (
    GsmExportedManager *proxy,
    gchar ***out_inhibitors,
    GCancellable *cancellable,
    GError **error);

void gsm_exported_manager_call_is_autostart_condition_handled (
    GsmExportedManager *proxy,
    const gchar *arg_condition,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gsm_exported_manager_call_is_autostart_condition_handled_finish (
    GsmExportedManager *proxy,
    gboolean *out_handled,
    GAsyncResult *res,
    GError **error);

gboolean gsm_exported_manager_call_is_autostart_condition_handled_sync (
    GsmExportedManager *proxy,
    const gchar *arg_condition,
    gboolean *out_handled,
    GCancellable *cancellable,
    GError **error);

void gsm_exported_manager_call_shutdown (
    GsmExportedManager *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gsm_exported_manager_call_shutdown_finish (
    GsmExportedManager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean gsm_exported_manager_call_shutdown_sync (
    GsmExportedManager *proxy,
    GCancellable *cancellable,
    GError **error);

void gsm_exported_manager_call_reboot (
    GsmExportedManager *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gsm_exported_manager_call_reboot_finish (
    GsmExportedManager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean gsm_exported_manager_call_reboot_sync (
    GsmExportedManager *proxy,
    GCancellable *cancellable,
    GError **error);

void gsm_exported_manager_call_can_shutdown (
    GsmExportedManager *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gsm_exported_manager_call_can_shutdown_finish (
    GsmExportedManager *proxy,
    gboolean *out_is_available,
    GAsyncResult *res,
    GError **error);

gboolean gsm_exported_manager_call_can_shutdown_sync (
    GsmExportedManager *proxy,
    gboolean *out_is_available,
    GCancellable *cancellable,
    GError **error);

void gsm_exported_manager_call_logout (
    GsmExportedManager *proxy,
    guint arg_mode,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gsm_exported_manager_call_logout_finish (
    GsmExportedManager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean gsm_exported_manager_call_logout_sync (
    GsmExportedManager *proxy,
    guint arg_mode,
    GCancellable *cancellable,
    GError **error);

void gsm_exported_manager_call_is_session_running (
    GsmExportedManager *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gsm_exported_manager_call_is_session_running_finish (
    GsmExportedManager *proxy,
    gboolean *out_running,
    GAsyncResult *res,
    GError **error);

gboolean gsm_exported_manager_call_is_session_running_sync (
    GsmExportedManager *proxy,
    gboolean *out_running,
    GCancellable *cancellable,
    GError **error);



/* D-Bus property accessors: */
const gchar *gsm_exported_manager_get_session_name (GsmExportedManager *object);
gchar *gsm_exported_manager_dup_session_name (GsmExportedManager *object);
void gsm_exported_manager_set_session_name (GsmExportedManager *object, const gchar *value);

const gchar *gsm_exported_manager_get_renderer (GsmExportedManager *object);
gchar *gsm_exported_manager_dup_renderer (GsmExportedManager *object);
void gsm_exported_manager_set_renderer (GsmExportedManager *object, const gchar *value);

gboolean gsm_exported_manager_get_session_is_active (GsmExportedManager *object);
void gsm_exported_manager_set_session_is_active (GsmExportedManager *object, gboolean value);

guint gsm_exported_manager_get_inhibited_actions (GsmExportedManager *object);
void gsm_exported_manager_set_inhibited_actions (GsmExportedManager *object, guint value);


/* ---- */

#define GSM_TYPE_EXPORTED_MANAGER_PROXY (gsm_exported_manager_proxy_get_type ())
#define GSM_EXPORTED_MANAGER_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GSM_TYPE_EXPORTED_MANAGER_PROXY, GsmExportedManagerProxy))
#define GSM_EXPORTED_MANAGER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GSM_TYPE_EXPORTED_MANAGER_PROXY, GsmExportedManagerProxyClass))
#define GSM_EXPORTED_MANAGER_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GSM_TYPE_EXPORTED_MANAGER_PROXY, GsmExportedManagerProxyClass))
#define GSM_IS_EXPORTED_MANAGER_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GSM_TYPE_EXPORTED_MANAGER_PROXY))
#define GSM_IS_EXPORTED_MANAGER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GSM_TYPE_EXPORTED_MANAGER_PROXY))

typedef struct _GsmExportedManagerProxy GsmExportedManagerProxy;
typedef struct _GsmExportedManagerProxyClass GsmExportedManagerProxyClass;
typedef struct _GsmExportedManagerProxyPrivate GsmExportedManagerProxyPrivate;

struct _GsmExportedManagerProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  GsmExportedManagerProxyPrivate *priv;
};

struct _GsmExportedManagerProxyClass
{
  GDBusProxyClass parent_class;
};

GType gsm_exported_manager_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GsmExportedManagerProxy, g_object_unref)
#endif

void gsm_exported_manager_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GsmExportedManager *gsm_exported_manager_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
GsmExportedManager *gsm_exported_manager_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void gsm_exported_manager_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GsmExportedManager *gsm_exported_manager_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
GsmExportedManager *gsm_exported_manager_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define GSM_TYPE_EXPORTED_MANAGER_SKELETON (gsm_exported_manager_skeleton_get_type ())
#define GSM_EXPORTED_MANAGER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GSM_TYPE_EXPORTED_MANAGER_SKELETON, GsmExportedManagerSkeleton))
#define GSM_EXPORTED_MANAGER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GSM_TYPE_EXPORTED_MANAGER_SKELETON, GsmExportedManagerSkeletonClass))
#define GSM_EXPORTED_MANAGER_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GSM_TYPE_EXPORTED_MANAGER_SKELETON, GsmExportedManagerSkeletonClass))
#define GSM_IS_EXPORTED_MANAGER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GSM_TYPE_EXPORTED_MANAGER_SKELETON))
#define GSM_IS_EXPORTED_MANAGER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GSM_TYPE_EXPORTED_MANAGER_SKELETON))

typedef struct _GsmExportedManagerSkeleton GsmExportedManagerSkeleton;
typedef struct _GsmExportedManagerSkeletonClass GsmExportedManagerSkeletonClass;
typedef struct _GsmExportedManagerSkeletonPrivate GsmExportedManagerSkeletonPrivate;

struct _GsmExportedManagerSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  GsmExportedManagerSkeletonPrivate *priv;
};

struct _GsmExportedManagerSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType gsm_exported_manager_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GsmExportedManagerSkeleton, g_object_unref)
#endif

GsmExportedManager *gsm_exported_manager_skeleton_new (void);


G_END_DECLS

#endif /* __ORG_GNOME_SESSIONMANAGER_H__ */
